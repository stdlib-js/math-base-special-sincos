{
  "version": 3,
  "sources": ["../lib/kernel_sincos.js", "../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549\nvar S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6\nvar S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5\nvar S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D\nvar S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB\nvar S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C\n\nvar C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C\nvar C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177\nvar C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590\nvar C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD\nvar C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4\nvar C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4\n\n\n// MAIN //\n\n/**\n* Computes the sine and cosine on \\\\( \\approx \\[-\\pi/4, \\pi/4\\] \\\\) (except for \\\\(-0\\\\)), where \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* @private\n* @param {number} x - input value (in radians, assumed to be bounded by `~\u03C0/4` in magnitude)\n* @param {number} y - tail of `x`\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} sine and cosine\n*/\nfunction kernelSincos( x, y, out, stride, offset ) {\n\tvar hz;\n\tvar r;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));\n\tv = z * x;\n\tif ( y === 0.0 ) {\n\t\tout[ offset ] = x + (v * (S1 + (z*r)));\n\t} else {\n\t\tout[ offset ] = x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));\n\t}\n\tr = z * (C1 + (z * (C2 + (z*C3))));\n\tr += w * w * (C4 + (z * (C5 + (z*C6))));\n\thz = 0.5 * z;\n\tw = 1.0 - hz;\n\tout[ offset + stride ] = w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kernelSincos;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar rempio2 = require( '@stdlib/math-base-special-rempio2' );\nvar kernelSincos = require( './kernel_sincos.js' );\n\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// The smaller of the two cutoffs for the sine and cosine kernels: 2^-27 = 0x3e400000 => 00111110010000000000000000000000\nvar SMALL_HIGH_WORD = 0x3e400000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of an angle measured in radians and assigns the results to a provided output array.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\) and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |    S   |    C   |   T    |\n*     | 1 |    C   |   -S   |  -1/T  |\n*     | 2 |   -S   |   -C   |   T    |\n*     | 3 |   -C   |    S   |  -1/T  |\n*\n* @private\n* @param {number} x - input value (in radians)\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = sincos( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincos( 3.141592653589793/2.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincos( -3.141592653589793/6.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincos( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sincos( x, out, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\n\t// Case: |x| ~< \u03C0/4\n\tix &= ABS_MASK;\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\tif ( (x|0) === 0 ) {\n\t\t\t\tout[ offset ] = x;\n\t\t\t\tout[ offset + stride ] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn kernelSincos( x, 0.0, out, stride, offset );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\n\t// Compute the sine and cosine together:\n\tkernelSincos( Y[ 0 ], Y[ 1 ], out, stride, offset );\n\n\tswitch ( n & 3 ) {\n\tcase 1:\n\t\ttmp = out[ offset + stride ];\n\t\tout[ offset + stride ] = -out[ offset ];\n\t\tout[ offset ] = tmp;\n\t\treturn out;\n\tcase 2:\n\t\tout[ offset ] *= -1;\n\t\tout[ offset + stride ] *= -1;\n\t\treturn out;\n\tcase 3:\n\t\t// Passing\n\t\ttmp = -out[ offset + stride ];\n\t\tout[ offset + stride ] = out[ offset ];\n\t\tout[ offset ] = tmp;\n\t\treturn out;\n\tdefault:\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincos;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of an angle measured in radians.\n*\n* @param {number} x - input value (in radians)\n* @returns {Array<number>} sine and cosine\n*\n* @example\n* var v = sincos( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincos( 3.141592653589793/2.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincos( -3.141592653589793/6.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincos( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincos( x ) {\n\treturn assign( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincos;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of an angle measured in radians.\n*\n* @module @stdlib/math-base-special-sincos\n*\n* @example\n* var sincos = require( '@stdlib/math-base-special-sincos' );\n*\n* var v = sincos( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* v = sincos( 3.141592653589793/2.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* v = sincos( -3.141592653589793/6.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* v = sincos( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var sincos = require( '@stdlib/math-base-special-sincos' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincos.assign( 0.0, out, 1, 0 );\n* // return <Float64Array>[ ~0.0, ~1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_kernel_sincos", "__commonJSMin", "exports", "module", "S1", "S2", "S3", "S4", "S5", "S6", "C1", "C2", "C3", "C4", "C5", "C6", "kernelSincos", "x", "y", "out", "stride", "offset", "hz", "r", "v", "w", "z", "require_assign", "__commonJSMin", "exports", "module", "ABS_MASK", "EXPONENT_MASK", "getHighWord", "rempio2", "kernelSincos", "PIO4_HIGH_WORD", "SMALL_HIGH_WORD", "Y", "sincos", "x", "out", "stride", "offset", "tmp", "ix", "n", "require_main", "__commonJSMin", "exports", "module", "assign", "sincos", "x", "setReadOnly", "main", "assign"]
}
